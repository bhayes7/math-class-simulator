?rep
?rnorm
rnorm(10, mean = 0.5, sd = 0.25)
rnorm(10, mean = 0.5, sd = 0.5)
rnorm(10, mean = 0.5, sd = 0.3)
rnorm(10, mean = 0.5, sd = 0.4)
# Main Simulation function
library(purrr)
?rbernoulli
?replicate
studyDays <- replicate(numWeeks * 7, rbernoulli(1, studyProb()))
# user defined inputs
numStudents <- 1
numWeeks <- 16
classesPerWeek <- 3
freePointsFrac <- 0.5 # fraction of points awarded automatically for turning in an assignment
# student behavior distributions
studyProb <- function(){return(rnorm(1, mean = 0.5, sd = 0.25))}
examFrequency <- 2 # exams occur on the last day of this many weeks
attendProb <- function(){return(0.9)}
studyDays <- replicate(numWeeks * 7, rbernoulli(1, studyProb()))
studyDays
sum(studyDays) / length(studyDays)
days <- rep(1:7, times = numWeeks)
days
attendDays <- sapply(days, attendProb)
?sapply
attendProb <- function(dayOfWeek){
if (dayOfWeek %in% c(2, 4, 6, 7)){return(0)}
else{return(0.9)}
}
attendDays <- sapply(days, attendProb)
attendDays <- sapply(days, function(day){return(rbernoulli(1, attendProb(day)))})
attendDays
sum(attendDays) / length(attendDays)
attendProb <- function(dayOfWeek){
if (dayOfWeek %in% c(2, 4, 6, 7)){return(0)}
else{return(0.95)}
}
attendDays <- sapply(days, function(day){return(rbernoulli(1, attendProb(day)))})
attendDays
?split
rep(1:3, each = 3)
split(studyDays, rep(1:7, each = length(studyDays)))
split(studyDays, rep(1:7, each = 7))
split(studyDays, rep(1:7, each = length(studyDays) / 7))
split(studyDays, rep(1:7, each = length(studyDays) / numWeeks))
matrix(studyDays, ncol = 7)
studyDays
matrix(studyDays, nrow = 7)
matrix(studyDays, ncol = 7, byrow = TRUE)
days <- 1:(numWeeks * 7)
days
days %% 7
studyDays[1:2]
library(magrittr)
examDays <- rep(FALSE, times = length(days))
FALSE + TRUE
examDays <- sapply(1:numWeeks, function(week){
if (week %% examFrequency == 0){
return(c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE))
}
else{
return(rep(FALSE, times = 7))
}
})
examDays
examDays <- lapply(1:numWeeks, function(week){
if (week %% examFrequency == 0){
return(c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE))
}
else{
return(rep(FALSE, times = 7))
}
})
examDays
unlist(examDays)
length(unlist(examDays))
examDays <- lapply(1:numWeeks, function(week){
if (week %% examFrequency == 0){
return(c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE))
}
else{
return(rep(FALSE, times = 7))
}
}) %>%
unlist()
examDays
?tail
# fix indexing
examDays <- tail(examDays, n = length(examDays) - 1)
examDays
examDays <- c(examDays, FALSE)
examDays
rnorm(22, mean = 0.5, sd = 0.25)
students <- rnorm(22, mean = 0.5, sd = 0.25)
mean(students)
sd(students)
rnorm(22, mean = 6, sd = 3)
students <- rnorm(22, mean = 6, sd = 3)
students
mean(students)
sd(students)
students <- rnorm(22, mean = 3, sd = 1)
students
round(students)
round(students) / 7
dayProbs <- round(students) / 7
dayprovs
dayProbs
mean(dayProbs)
sd(dayProbs)
?read.table
studyData <- read.table("student_study_data.xlsx", header = TRUE)
View(studyData)
# Presentation Plots
library(readxl)
?read_xlsx
studyData <- read_xlsx("student_study_data.xlsx", col_names = TRUE)
View(studyData)
library(dplyr)
library(tidyr)
?mutate
View(studyData)
studyData <- read_xlsx("student_study_data.xlsx", col_names = TRUE) %>%
mutate(dailyStudyProb = `Days of Study Per Week` / 7)
View(studyData)
library(ggplot2)
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..)) +
geom_density(mapping = aex(x = dailyStudyProb)) +
stat_function(fun = dnorm, args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)))
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..)) +
geom_density(mapping = aes(x = dailyStudyProb)) +
stat_function(fun = dnorm, args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)))
studyPlot
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 1) +
geom_density(mapping = aes(x = dailyStudyProb)) +
stat_function(fun = dnorm, args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)))
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 0.1) +
geom_density(mapping = aes(x = dailyStudyProb)) +
stat_function(fun = dnorm, args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)))
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 0.1) +
geom_density(mapping = aes(x = dailyStudyProb), color = "blue") +
stat_function(fun = dnorm, args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)), color = "red")
studyPlot
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 0.1) +
geom_density(mapping = aes(x = dailyStudyProb), color = "blue", size = 1.5) +
stat_function(fun = dnorm,
args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)),
color = "red", size = 1.5)
studyPlot
?geom_density
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 0.1) +
geom_density(mapping = aes(x = dailyStudyProb), color = "blue", size = 1.5) +
stat_function(fun = dnorm,
args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)),
color = "red", size = 1.5) +
labs(title = "Density Distribution of Daily Study Probabilities",
x = "Probability of Studying per Day", y = "Density")
studyPlot
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 0.1) +
geom_density(mapping = aes(x = dailyStudyProb), color = "blue", size = 1.5) +
stat_function(fun = dnorm,
args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)),
color = "red", size = 1.5) +
labs(title = "Density Distribution of Daily Study Probabilities",
x = "Probability of Studying per Day", y = "Density") +
theme_minimal()
studyPlot <- ggplot(data = studyData) +
geom_histogram(mapping = aes(x = dailyStudyProb, y = ..density..), binwidth = 0.1) +
geom_density(mapping = aes(x = dailyStudyProb), color = "blue", size = 1.5) +
stat_function(fun = dnorm,
args = list(mean = mean(studyData$dailyStudyProb), sd = sd(studyData$dailyStudyProb)),
color = "red", size = 1.5) +
labs(title = "Density Distribution of Daily Study Probabilities",
x = "Probability of Studying per Day", y = "Density") +
theme_bw()
studyPlot
mean(studyData$dailyStudyProb)
sd(studyData$dailyStudyProb)
rm(list = ls())
# user defined inputs
numStudents <- 1
freePointsFrac <- 0.5 # fraction of points awarded automatically for turning in an assignment
# other constants
classesPerWeek <- 3 # this will remain constant for convenience
numWeeks <- 16
examFrequency <- 2 # exams occur on the last day of this many weeks (must divide numWeeks)
# student behavior distributions
studyProb <- function(){return(rnorm(1, mean = 0.4285714, sd = 0.1527207))}
attendProb <- function(dayOfWeek){
if (dayOfWeek %in% c(0, 2, 4, 6)){return(0)}
else{return(0.95)}
}
days <- 1:(numWeeks * 7)
daysOfWeek <- days %% 7 # assume 0 is Sunday, 1 is Monday, 2 is Tuesday, etc...
studyDays <- replicate(numWeeks * 7, rbernoulli(1, studyProb()))
# Main Simulation function
library(purrr) # for rbernoulli
library(magrittr) # for pipe
studyDays <- replicate(numWeeks * 7, rbernoulli(1, studyProb()))
studyDays
matrix(studyDays, nrow = 7)
matrix(studyDays, ncol = 7, byrow = TRUE)
?write.csv
write.csv(matrix(studyDays, ncol = 7, byrow = TRUE), file = "sampleStudyCalendar.csv")
studyData <- read_xlsx("data/student_study_data.xlsx", col_names = TRUE) %>%
mutate(dailyStudyProb = `Days of Study Per Week` / 7)
quizPerformanceDistribution <- read_xlsx("quiz_performance_distribution.xlsx")
quizPerformanceDistribution <- read_xlsx("data/quiz_performance_distribution.xlsx")
View(quizPerformanceDistribution)
View(quizPerformanceDistribution)
?filter
View(quizPerformanceDistribution)
?rnorm
?round
# specify when quizzes occur
quizDays <- lapply(days, function(day){
return((day %% 7) %in% c(1, 3, 5))
})
quizDays
# specify when quizzes occur
quizDays <- lapply(days, function(day){
return((day %% 7) %in% c(1, 3, 5))
}) %>%
unlist()
quizDays
which(quizDays)
which(quizDays[1:30])
which(quizDays[1:29])
last(which(quizDays[1:29]))
last(which(quizDays[1:28]))
1:3
rm(list = ls())
# USER DEFINED INPUTS
numStudents <- 1
freePointsFrac <- 0.5 # fraction of points awarded automatically for turning in an assignment
# OTHER CONSTANTS
classesPerWeek <- 3 # this will remain constant for convenience
numWeeks <- 16
examFrequency <- 2 # exams occur on the last day of this many weeks (must divide numWeeks)
# student behavior distributions
studyData <- read_xlsx("data/student_study_data.xlsx", col_names = TRUE) %>%
mutate(dailyStudyProb = `Days of Study Per Week` / 7)
studyMean <- mean(studyData$dailyStudyProb)
studySD <- sd(studyData$dailyStudyProb)
studyProb <- function(){return(rnorm(1, mean = studyMean, sd = studySD))}
attendProb <- function(dayOfWeek){
if (dayOfWeek %in% c(0, 2, 4, 6)){return(0)}
else{return(0.95)}
}
# CALENDAR VARIABLES
days <- 1:(numWeeks * 7)
daysOfWeek <- days %% 7 # assume 0 is Sunday, 1 is Monday, 2 is Tuesday, etc...
# specify when quizzes occur
quizDays <- lapply(days, function(day){
return((day %% 7) %in% c(1, 3, 5))
}) %>%
unlist()
# specify when exams occur
examDays <- lapply(1:numWeeks, function(week){
if (week %% examFrequency == 0){
return(c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE))
}
else{
return(rep(FALSE, times = 7))
}
}) %>%
unlist()
# fix indexing
examDays <- tail(examDays, n = length(examDays) - 1)
examDays <- c(examDays, FALSE)
examDays <- lapply(1:numWeeks, function(week){
if (week %% examFrequency == 0){
return(c(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE))
}
else{
return(rep(FALSE, times = 7))
}
}) %>%
unlist() %>%
tail(n = length(examDays) - 1) %>%
c(FALSE)
examDays
# function for ensuring performance metrics are within acceptable bounds
gradeCap <- function(performance){
return(max(freePointsFrac, min(performance, 1)))
}
quizPerformanceDistribution <- read_xlsx("data/quiz_performance_distribution.xlsx")
quizPerformanceMap <- function(attend, studyDays){
row <- filter(quizPerformanceDistribution, ((attendPrev == attend) && (studyDays == studyDays)))
mean <- row$mean
sd <- row$sd
return(c(mean, sd))
}
quizPerformance <- function(day, studyDays, attendDays){
# student gets no points if they aren't there to take the quiz!
if (!attendDays[day]){return(0)}
# everyone who attends gets 100% on first quiz
if (day == 1){return(1)}
# if its an exam day, theres an exam instead of a quiz
if (examDays[day]){return(examPerformance())} #TODO write examScore function
# otherwise, calculate quiz performance
else{
# determine whether student attended previous class
lastQuizDay <- last(which(quizDays[1:(day - 1)]))
attend <- attendDays[lastQuizDay]
# count # of days student has studied since last quiz
numStudyDays <- sum(studyDays[(lastQuizDay + 1):day])
# calculate performance
performanceDist <- quizPerformanceMap(attend, numStudyDays)
performanceMean <- performanceDist[1]
performanceSD <- performanceDist[2]
performance <- round(gradeCap(rnorm(1, mean = performanceMean, sd = performanceSD)), digits = 1)
return(performance)
}
}
# start iterating here
studyDays <- replicate(numWeeks * 7, rbernoulli(1, studyProb()))
attendDays <- sapply(daysOfWeek, function(day){return(rbernoulli(1, attendProb(day)))})
quizDays[2]
quizDays[3]
day <- 3
lastQuizDay <- last(which(quizDays[1:(day - 1)]))
lastQuizDay
attend <- attendDays[lastQuizDay]
attend
studyDays
numStudyDays <- sum(studyDays[(lastQuizDay + 1):day])
numStudyDays
# calculate performance
performanceDist <- quizPerformanceMap(attend, numStudyDays)
performanceDist
quizPerformance()
quizPerformanceDistribution
filter(quizPerformanceDistribution, ((attendPrev == attend) && (studyDays == studyDays)))
filter(quizPerformanceDistribution, ((attendPrev == attend) & (studyDays == studyDays)))
?filter
filter(quizPerformanceDistribution, (attendPrev == attend & studyDays == studyDays))
filter(quizPerformanceDistribution, (attendPrev == attend & studyDays == numStudyDays))
filter(quizPerformanceDistribution, (attendPrev == attend & studyDays == numStudyDays))$mean
quizPerformanceMap <- function(attend, numStudyDays){
row <- filter(quizPerformanceDistribution, (attendPrev == attend & studyDays == numStudyDays))
mean <- row$mean
sd <- row$sd
return(c(mean, sd))
}
# calculate performance
performanceDist <- quizPerformanceMap(attend, numStudyDays)
performanceDist
performanceMean <- performanceDist[1]
performanceSD <- performanceDist[2]
performance <- round(gradeCap(rnorm(1, mean = performanceMean, sd = performanceSD)), digits = 1)
performance
performance
performance <- round(gradeCap(rnorm(1, mean = performanceMean, sd = performanceSD)), digits = 1)
performance <- round(gradeCap(rnorm(1, mean = performanceMean, sd = performanceSD)), digits = 1)
per
performance
quizPerformance <- function(day, studyDays, attendDays){
# student gets no points if they aren't there to take the quiz!
if (!attendDays[day]){return(0)}
# everyone who attends gets 100% on first quiz
if (day == 1){return(1)}
# if its an exam day, theres an exam instead of a quiz
if (examDays[day]){return(examPerformance())} #TODO write examScore function
# otherwise, calculate quiz performance
else{
# determine whether student attended previous class
lastQuizDay <- last(which(quizDays[1:(day - 1)]))
attend <- attendDays[lastQuizDay]
# count # of days student has studied since last quiz
numStudyDays <- sum(studyDays[(lastQuizDay + 1):day])
# calculate performance
performanceDist <- quizPerformanceMap(attend, numStudyDays)
performanceMean <- performanceDist[1]
performanceSD <- performanceDist[2]
performance <- round(gradeCap(rnorm(1, mean = performanceMean, sd = performanceSD)), digits = 1)
return(performance)
}
}
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
quizPerformance(3, studyDays, attendDays)
which(FALSE)
?xor
# specify when quizzes occur
quizDays <- lapply(days, function(day){
return((day %% 7) %in% c(1, 3, 5))
}) %>%
unlist() %>%
xor(examDays)
quizDays
?sapply
?colnames
?list
gradeCutoffs <- list(
A = 92
)
gradeCutoffs["A"]
